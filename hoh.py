import telebot
from telebot import types
import logging
import time
import re
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7714752663:AAGV_XL4IfAjZ_o5vqyf29IJlA5scv1BD6c"
CHANNEL_ID = "-1001948875251"

bot = telebot.TeleBot(BOT_TOKEN)

def is_user_authorized(user_id):
    """–ò—â–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/searchMessages"
        payload = {
            "chat_id": CHANNEL_ID,
            "query": str(user_id),
            "limit": 100
        }
        
        response = requests.post(url, json=payload).json()
        
        if not response.get('ok'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response}")
            return False
            
        for message in response.get('result', {}).get('messages', []):
            if 'content' in message and 'text' in message['content']:
                if re.search(fr'ID:\s*{user_id}\b', message['content']['text']):
                    return True
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    load_emojis = [
        "~(Àò‚ñæÀò~)",
        "~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)",
        "~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)",
        "(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)",
        "(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)"
    ]
    
    msg = bot.send_message(chat_id, load_emojis[0])
    
    # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    for emoji in load_emojis[1:]:
        time.sleep(0.07)
        bot.edit_message_text(emoji, chat_id, msg.message_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
    if is_user_authorized(user_id):
        bot.edit_message_text("‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", chat_id, msg.message_id)
    else:
        markup = types.InlineKeyboardMarkup(row_width=2)
        ru_button = types.InlineKeyboardButton("RU üá∑üá∫", callback_data='lang_ru')
        en_button = types.InlineKeyboardButton("EN üá¨üáß", callback_data='lang_en')
        markup.add(ru_button, en_button)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", chat_id, msg.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def language_callback(call):
    user_id = call.from_user.id
    language = call.data.split('_')[1].upper()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if is_user_authorized(user_id):
        response = "üîê –í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ!" if language == 'RU' else "üîê Already registered!"
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id)
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        user_info = f"ID: {user_id}\nLanguage: {language}"
        bot.send_message(CHANNEL_ID, user_info)
        response = "üì¨ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" if language == 'RU' else "üì¨ Request submitted!"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏" if language == 'RU' else "‚ö†Ô∏è Connection error"
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id)

def main():
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()

if __name__ == "__main__":
    main()