import telebot
from telebot import types
import logging
import time
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7714752663:AAERF4Nj3ICaw0jbv0JyFbCvlut7ZzilTKg"
CHANNEL_ID = "-1001948875251"  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
JSONBIN_API_KEY = "$2a$10$hT79uCEaJENfQBZ7576aL.upUOtnPqJZX53sWcln0HZib/bgs.8.u"
JSONBIN_BIN_ID = "67f532028a456b796684e974"

bot = telebot.TeleBot(BOT_TOKEN)

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ API-–∑–∞–ø—Ä–æ—Å–æ–≤
users_cache = None
last_cache_update = 0
CACHE_TTL = 300  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)

def get_users_data(force_update=False):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSONBin.io —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global users_cache, last_cache_update
    
    current_time = time.time()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if not force_update and users_cache is not None and (current_time - last_cache_update) < CACHE_TTL:
        return users_cache
    
    try:
        url = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"
        headers = {
            "X-Master-Key": JSONBIN_API_KEY
        }
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            users_data = response.json().get('record', {}).get('users', [])
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            users_cache = users_data
            last_cache_update = current_time
            return users_data
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSONBin: {response.status_code}, {response.text}")
            return users_cache or []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSONBin: {e}")
        return users_cache or []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å

def update_users_data(users_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSONBin.io –∏ –∫—ç—à"""
    global users_cache, last_cache_update
    
    try:
        url = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"
        headers = {
            "X-Master-Key": JSONBIN_API_KEY,
            "Content-Type": "application/json"
        }
        data = {"users": users_data}
        response = requests.put(url, json=data, headers=headers)
        
        if response.status_code == 200:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ JSONBin
            users_cache = users_data
            last_cache_update = time.time()
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSONBin: {response.status_code}, {response.text}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JSONBin: {e}")
        return False

def is_user_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏—â–µ—Ç –µ–≥–æ ID –≤ –∫—ç—à–µ –¥–∞–Ω–Ω—ã—Ö JSONBin"""
    users = get_users_data()
    
    for user in users:
        if user.get('user_id') == user_id:
            return True
    
    return False

def register_user(user_id, language):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSONBin"""
    users = get_users_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    for user in users:
        if user.get('user_id') == user_id:
            return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = {
        "user_id": user_id,
        "language": language,
        "registration_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    users.append(new_user)
    return update_users_data(users)

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    load_emojis = [
        "~(Àò‚ñæÀò~)",
        "~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)",
        "~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)",
        "(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)",
        "(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)"
    ]

    msg = bot.send_message(chat_id, load_emojis[0])

    # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    for emoji in load_emojis[1:]:
        time.sleep(0.07)
        bot.edit_message_text(emoji, chat_id, msg.message_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫—ç—à –¥–∞–Ω–Ω—ã—Ö JSONBin
    if is_user_authorized(user_id):
        bot.edit_message_text("‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", chat_id, msg.message_id)
    else:
        markup = types.InlineKeyboardMarkup(row_width=2)
        ru_button = types.InlineKeyboardButton("RU üá∑üá∫", callback_data='lang_ru')
        en_button = types.InlineKeyboardButton("EN üá¨üáß", callback_data='lang_en')
        markup.add(ru_button, en_button)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", chat_id, msg.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def language_callback(call):
    user_id = call.from_user.id
    language = call.data.split('_')[1].upper()

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    if is_user_authorized(user_id):
        response = "üîê –í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ!" if language == 'RU' else "üîê Already registered!"
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id)
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSONBin
    try:
        if register_user(user_id, language):
            response = "üì¨ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" if language == 'RU' else "üì¨ Request submitted!"
        else:
            response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" if language == 'RU' else "‚ö†Ô∏è Registration error"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏" if language == 'RU' else "‚ö†Ô∏è Connection error"

    bot.edit_message_text(response, call.message.chat.id, call.message.message_id)

def main():
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞, —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à
    get_users_data(force_update=True)
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    bot.infinity_polling()

if __name__ == "__main__":
    main()
