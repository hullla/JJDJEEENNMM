import telebot
from telebot import types
import logging
import re
import requests
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7671924788:AAFygetCrBwqFGtgHPsxRUGi8pDLlmDszKo"
CHANNEL_ID = "-1001948875251"

bot = telebot.TeleBot(BOT_TOKEN)

# –ö—ç—à –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
authorized_users = set()

def check_user_in_channel(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º getUpdates –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?limit=100&allowed_updates=[\"channel_post\"]"
        response = requests.get(url, timeout=10)
        data = response.json()

        if not data.get('ok'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {data}")
            return False

        # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞
        for update in data.get('result', []):
            if 'channel_post' in update:
                post = update['channel_post']
                if str(post.get('chat', {}).get('id')) == CHANNEL_ID and 'text' in post:
                    if f"ID: {user_id}" in post['text']:
                        # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –∫—ç—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                        authorized_users.add(user_id)
                        return True

        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")
        return False

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id in authorized_users:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! / You are already authorized. Welcome!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –≤ –∫–∞–Ω–∞–ª–µ
    is_authorized = check_user_in_channel(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {is_authorized}")

    if is_authorized:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! / You are already authorized. Welcome!")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        markup = types.InlineKeyboardMarkup(row_width=2)
        ru_button = types.InlineKeyboardButton("RU üá∑üá∫", callback_data='lang_ru')
        en_button = types.InlineKeyboardButton("EN üá¨üáß", callback_data='lang_en')
        markup.add(ru_button, en_button)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def language_callback(call):
    try:
        user_id = call.from_user.id
        username = call.from_user.username or "No username"
        first_name = call.from_user.first_name or "No first name"
        last_name = call.from_user.last_name or "No last name"

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        language = call.data.split('_')[1].upper()
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, –¥–µ–ª–∞–µ–º —ç—Ç–æ —Å—Ä–∞–∑—É
        if language == 'RU':
            response = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –û–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        else:  # 'EN'
            response = "You've selected English. Please wait for admin authorization."
            
        bot.edit_message_text(chat_id=call.message.chat.id, 
                            message_id=call.message.message_id,
                            text=response,
                            reply_markup=None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –≤ –∫–∞–Ω–∞–ª–µ –ü–û–°–õ–ï –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        is_authorized = check_user_in_channel(user_id)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_authorized:
            authorized_users.add(user_id)
            if language == 'RU':
                bot.send_message(call.message.chat.id, "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            else:  # 'EN'
                bot.send_message(call.message.chat.id, "You are authorized. Welcome!")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            user_info = f"New user:\nID: {user_id}\nUsername: @{username}\nName: {first_name} {last_name}\nLanguage: {language}"
            try:
                bot.send_message(CHANNEL_ID, user_info)
                logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª: {user_info}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–±–ª–µ–º–µ
                if language == 'RU':
                    bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:  # 'EN'
                    bot.send_message(call.message.chat.id, "An error occurred. Please try again later.")
                
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å –∫–Ω–æ–ø–∫–∏
        bot.answer_callback_query(call.id)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        bot.answer_callback_query(call.id, text="Error occurred")

@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in authorized_users:
        is_authorized = True
    else:
        is_authorized = check_user_in_channel(user_id)
        if is_authorized:
            authorized_users.add(user_id)

    if not is_authorized:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "hi"
    if message.text.lower() == "hi":
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    while True:
        try:
            bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
            time.sleep(10)

if __name__ == "__main__":
    main()