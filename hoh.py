import telebot
from telebot import types
import logging
import time
import datetime
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7714752663:AAGV_XL4IfAjZ_o5vqyf29IJlA5scv1BD6c"
CHANNEL_ID = "-1001948875251"
JSONBIN_API_KEY = "$2a$10$s9kk4994hSgcahu7WYiM/uEsPNVF5eCNpeiz6SkThOhKKwhc6yX0W"
JSONBIN_BIN_ID = "$2a$10$C7S.J33A66P0gXo.q0ELpeAbjACmEGCVWc9o3Wv02YMxTVuwRxTRW"

bot = telebot.TeleBot(BOT_TOKEN)

# –ö—ç—à –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_database_cache = {"users": []}
last_cache_update = 0
CACHE_TIMEOUT = 60  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def get_user_database(force_update=False):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSONBin –∏–ª–∏ –∏–∑ –∫—ç—à–∞"""
    global user_database_cache, last_cache_update
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
    current_time = time.time()
    if not force_update and (current_time - last_cache_update < CACHE_TIMEOUT):
        return user_database_cache
    
    try:
        url = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest"
        headers = {
            "X-Master-Key": JSONBIN_API_KEY
        }
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            user_database_cache = response.json()['record']
            last_cache_update = current_time
            return user_database_cache
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {response.text}")
            return user_database_cache
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return user_database_cache

def update_user_database(user_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSONBin"""
    try:
        database = get_user_database()
        user_exists = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        for i, user in enumerate(database.get("users", [])):
            if user.get("id") == user_data.get("id"):
                database["users"][i] = user_data
                user_exists = True
                break
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if not user_exists:
            if "users" not in database:
                database["users"] = []
            database["users"].append(user_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        global user_database_cache
        user_database_cache = database
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –≤ JSONBin
        url = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"
        headers = {
            "Content-Type": "application/json",
            "X-Master-Key": JSONBIN_API_KEY
        }
        response = requests.put(url, json=database, headers=headers)
        
        if response.status_code == 200:
            logger.info(f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('id')}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.text}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def is_user_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à"""
    try:
        database = get_user_database()
        for user in database.get("users", []):
            if user.get("id") == user_id:
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    load_emojis = [
        "~(Àò‚ñæÀò~)",
        "~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)",
        "~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)",
        "(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)",
        "(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)"
    ]

    msg = bot.send_message(chat_id, load_emojis[0])

    # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    for emoji in load_emojis[1:]:
        time.sleep(0.07)
        bot.edit_message_text(emoji, chat_id, msg.message_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫—ç—à
    if is_user_authorized(user_id):
        bot.edit_message_text("‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", chat_id, msg.message_id)
    else:
        markup = types.InlineKeyboardMarkup(row_width=2)
        ru_button = types.InlineKeyboardButton("RU üá∑üá∫", callback_data='lang_ru')
        en_button = types.InlineKeyboardButton("EN üá¨üáß", callback_data='lang_en')
        markup.add(ru_button, en_button)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", chat_id, msg.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def language_callback(call):
    user_id = call.from_user.id
    language = call.data.split('_')[1].upper()

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if is_user_authorized(user_id):
        response = "üîê –í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ!" if language == 'RU' else "üîê Already registered!"
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id)
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSONBin
    try:
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        user_data = {
            "id": user_id,
            "language": language,
            "registration_time": current_time
        }
        
        success = update_user_database(user_data)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            bot.send_message(CHANNEL_ID, f"ID: {user_id}\nLanguage: {language}\nTime: {current_time}")
            response = "üì¨ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" if language == 'RU' else "üì¨ Request submitted!"
        else:
            response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏" if language == 'RU' else "‚ö†Ô∏è Error saving data"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏" if language == 'RU' else "‚ö†Ô∏è Connection error"

    bot.edit_message_text(response, call.message.chat.id, call.message.message_id)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        get_user_database(force_update=True)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –∫—ç—à")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()

if __name__ == "__main__":
    main()
