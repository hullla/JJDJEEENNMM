import telebot
from telebot import types
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7671924788:AAHHnq5uD7IzAwdAFRwwzqlKnp-6VPVvCi0"
CHANNEL_ID = "-1001948875251"

bot = telebot.TeleBot(BOT_TOKEN)

def is_user_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        member = bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    load_emojis = [
        "~(Àò‚ñæÀò~)",
        "~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)",
        "~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)~(Àò‚ñæÀò~)",
        "(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)(‚ó°‚Äø‚ó°‚úø)",
        "(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)(‚óï‚Äø‚Üº)"
    ]
    
    msg = bot.send_message(chat_id, load_emojis[0])
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    for emoji in load_emojis[1:]:
        time.sleep(0.07)  # –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ ~0.3 —Å–µ–∫
        bot.edit_message_text(emoji, chat_id, msg.message_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    is_authorized = is_user_authorized(user_id)
    
    if is_authorized:
        bot.edit_message_text("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", chat_id, msg.message_id)
    else:
        markup = types.InlineKeyboardMarkup(row_width=2)
        ru_button = types.InlineKeyboardButton("RU üá∑üá∫", callback_data='lang_ru')
        en_button = types.InlineKeyboardButton("EN üá¨üáß", callback_data='lang_en')
        markup.add(ru_button, en_button)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", chat_id, msg.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def language_callback(call):
    user_id = call.from_user.id
    language = call.data.split('_')[1].upper()
    
    if is_user_authorized(user_id):
        response = "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!" if language == 'RU' else "You're already authorized!"
        bot.edit_message_text(response, call.message.chat.id, call.message.message_id)
        return
    
    user_info = f"ID: {user_id}\nLanguage: {language}"
    try:
        bot.send_message(CHANNEL_ID, user_info)
        response = "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –û–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏." if language == 'RU' else "‚úÖ Data sent! Please wait for authorization."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        response = "üö´ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if language == 'RU' else "üö´ Sending error. Please try again."
    
    bot.edit_message_text(response, call.message.chat.id, call.message.message_id)

def main():
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()

if __name__ == "__main__":
    main()