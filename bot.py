import telebot
from telebot import types
import logging
import re
import requests
import time
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7671924788:AAFqich6NTHpOA22I6GysTqYXTFM-d0Pulo"  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ GitHub Secrets
CHANNEL_ID = "-1001948875251"  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ GitHub Secrets

bot = telebot.TeleBot(BOT_TOKEN)

# –ö—ç—à –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = set()
last_update_time = 0
UPDATE_INTERVAL = 300  # –û–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

def get_channel_messages():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        messages = []
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º getChat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChat?chat_id={CHANNEL_ID}"
        response = requests.get(url, timeout=10)
        chat_data = response.json()
        
        if not chat_data.get('ok'):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {chat_data}")
            return []
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º getChatHistory (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ API)
        try:
            offset = 0
            limit = 100
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatHistory?chat_id={CHANNEL_ID}&limit={limit}&offset={offset}"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            if data.get('ok'):
                messages.extend(data.get('result', []))
                return messages
            else:
                logger.warning("getChatHistory –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ getChatHistory: {e}")
        
        # –ï—Å–ª–∏ getChatHistory –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º getUpdates
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?limit=100"
            response = requests.get(url, timeout=10)
            data = response.json()
            
            if data.get('ok'):
                for update in data.get('result', []):
                    if 'channel_post' in update and str(update['channel_post'].get('chat', {}).get('id')) == CHANNEL_ID:
                        messages.append(update['channel_post'])
                        
                return messages
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ getUpdates: {e}")
        
        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            for i in range(1, 101):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMessage?chat_id={CHANNEL_ID}&message_id={i}"
                response = requests.get(url, timeout=5)
                data = response.json()
                
                if data.get('ok'):
                    messages.append(data.get('result'))
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        return messages

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
        return []

def load_authorized_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    global authorized_users, last_update_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º
    current_time = time.time()
    if current_time - last_update_time < UPDATE_INTERVAL:
        logger.debug("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ UPDATE_INTERVAL")
        return
    
    last_update_time = current_time
    temp_authorized_users = set()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
        messages = get_channel_messages()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for message in messages:
            if isinstance(message, dict) and 'text' in message:
                # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ "ID: –ù–û–ú–ï–†"
                matches = re.findall(r'ID:\s*(\d+)', message['text'])
                for match in matches:
                    temp_authorized_users.add(int(match))
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        if temp_authorized_users:
            authorized_users = temp_authorized_users
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(authorized_users)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {authorized_users}")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def periodic_update():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        try:
            load_authorized_users()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        time.sleep(UPDATE_INTERVAL)

def check_user_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return user_id in authorized_users

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_authorized = check_user_authorized(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {is_authorized}")

    if is_authorized:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! / You are already authorized. Welcome!")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        markup = types.InlineKeyboardMarkup(row_width=2)
        ru_button = types.InlineKeyboardButton("RU üá∑üá∫", callback_data='lang_ru')
        en_button = types.InlineKeyboardButton("EN üá¨üáß", callback_data='lang_en')
        markup.add(ru_button, en_button)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=markup)

@bot.message_handler(commands=['checkid'])
def check_id_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–≥–æ ID"""
    user_id = message.from_user.id
    is_authorized = check_user_authorized(user_id)
    
    if is_authorized:
        bot.send_message(message.chat.id, f"–í–∞—à ID: {user_id}\n–°—Ç–∞—Ç—É—Å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚úÖ")
    else:
        bot.send_message(message.chat.id, f"–í–∞—à ID: {user_id}\n–°—Ç–∞—Ç—É—Å: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚ùå\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def language_callback(call):
    user_id = call.from_user.id
    username = call.from_user.username or "No username"
    first_name = call.from_user.first_name or "No first name"
    last_name = call.from_user.last_name or "No last name"

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    language = call.data.split('_')[1].upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_authorized = check_user_authorized(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª
    if not is_authorized:
        user_info = f"New user:\nID: {user_id}\nUsername: @{username}\nName: {first_name} {last_name}\nLanguage: {language}"
        try:
            bot.send_message(CHANNEL_ID, user_info)
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª: {user_info}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∞—á–µ
            try:
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                payload = {
                    "chat_id": CHANNEL_ID,
                    "text": user_info
                }
                requests.post(url, json=payload, timeout=10)
            except Exception as e2:
                logger.error(f"–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if language == 'RU':
        if is_authorized:
            response = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
        else:
            response = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –û–∂–∏–¥–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–í–∞—à ID: {user_id} (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ)"
    else:  # 'EN'
        if is_authorized:
            response = "You've selected English. Welcome!"
        else:
            response = f"You've selected English. Please wait for admin authorization.\n\nYour ID: {user_id} (please save it)"

    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    bot.edit_message_text(chat_id=call.message.chat.id, 
                         message_id=call.message.message_id,
                         text=response,
                         reply_markup=None)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    load_authorized_users()

    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(authorized_users)} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    update_thread = threading.Thread(target=periodic_update, daemon=True)
    update_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ polling...")
            bot.polling(none_stop=True, interval=0, timeout=60)
        except requests.exceptions.ReadTimeout:
            logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling")
            time.sleep(1)
        except requests.exceptions.ConnectionError:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π")
            time.sleep(10)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
            time.sleep(30)  # –ñ–¥–µ–º –ø–æ–¥–æ–ª—å—à–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö

if __name__ == "__main__":
    main()